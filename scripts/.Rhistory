ylab("Potential Productivity")
?element_line
d_tbl
p <- ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity")
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", value = 18),
plotOutput(outputId = "myplot")
)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = reactive(input$n_str)))
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = output(input$n_str)))
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr = reactive({req(input$n_str)})
output$myplot <- p + theme(strip.text = element_text(size = nstrstr))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr = reactive({req(input$n_str)})
output$myplot <- p + theme(strip.text = element_text(size = nstr))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p #+ theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200),
plotOutput(outputId = "myplot")
)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = reactive(req(input$n_str))))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 1, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = reactive(req(input$n_str))))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive(as.numeric(input$n_str))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive(as.numeric(req(input$n_str)))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
?req
server <- function(input, output, session) {
nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(numericInput(
inputId="n_str", "Strip text", value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = input$n_str))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) # collecting and incorporating
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
numericInput(inputId = "mysize",
label = "Choose wisely the size",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize",
label = "Choose wisely the size",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
# geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize4",
label = "axis.ticks",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(axis.text = element_text(size = input$mysize3)) +
theme(axis.ticks = element_text(size = input$mysize4))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(axis.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(strip.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text.x",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2b",
label = "axis.text.y",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text.x = element_text(size = input$mysize2)) +
theme(axis.text.y = element_text(size = input$mysize2b)) +
theme(strip.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
d <- read_csv("../data/bnc_ish.csv.gz")
d
table(d$tag0002)
?setNames()
?rename
rename_with(d, ~"lemma", "tag0002")
d <- rename_with(d, ~"lemma", "tag0002")
write_csv(d, "../data/bnc_ish.csv.gz")
d <- read_csv("../data/bnc_ish.csv.gz")
d
d
table(d$lemma)
table(d$lemma) %>% as.data.frame()
table(d$lemma) %>% as.data.frame() %>% filter(Freq == 1)
table(d$lemma) %>% as.data.frame() %>% filter(Freq == 1) %>%
select(Var1)
table(d$lemma) %>% as.data.frame() %>% filter(Freq == 1) %>%
select(Var1) %>% unlist()
table(d$lemma) %>% as.data.frame() %>% filter(Freq == 1) %>%
select(Var1) %>% unlist() %>% as.character()
hapaxes <- table(d$lemma) %>% as.data.frame() %>% filter(Freq == 1) %>%
select(Var1) %>% unlist() %>% as.character()
hapaxes
d$text_publication_date
d %>% filter(text_publication_date != "unknown") %>%
summarise(
types = length(unique(lemma)),
tokens = n(),
ttr = types / tokens,
hapax_count = length(which(lemma %in% hapaxes)),
pp = hapax_count / tokens
)
d %>% filter(text_publication_date != "unknown") %>%
group_by(text_publication_date) %>%
summarise(
types = length(unique(lemma)),
tokens = n(),
ttr = types / tokens,
hapax_count = length(which(lemma %in% hapaxes)),
pp = hapax_count / tokens
)
d_tbl <- d %>% filter(text_publication_date != "unknown") %>%
group_by(text_publication_date) %>%
summarise(
types = length(unique(lemma)),
tokens = n(),
ttr = types / tokens,
hapax_count = length(which(lemma %in% hapaxes)),
pp = hapax_count / tokens
)
d_tbl$pp
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
# Vectors
my_vector <- c(1,2,3)
my_character_vector <- c("a", "b", "c")
my_other_character_vector <- c(1, "two", 3)
# Data frames
my_data_frame <- data.frame(names = c("Jack", "Jill", "Hensel", "Gretel"),
gingerbread = c(5, 6, 2, 10) )
my_data_frame[2,2]
my_data_frame[3,1]
rownames(my_data_frame)
my_second_data_frame <- data.frame(A = my_vector, B = my_character_vector,
C = my_other_character_vector)
# Matrices
my_matrix <- matrix(c(1,2,3,4,5,6), ncol = 2)
# Lists
my_list <- list(my_vector, my_data_frame, my_matrix)
my_vector[2]
my_list[[2]][3,2]
# logical
my_logical_object <- my_list[[2]][3,2] == 2
test <- 2
test2 = 2
test == test2
# character
my_character_object <- "hi"
# numeric
my_numeric_object <- sqrt(5)
# integer
my_integer_object <- 5
my_integer_object <- as.integer(my_integer_object)
is.integer(my_integer_object)
# factors
my_data_frame2 <- my_data_frame
my_data_frame$names <- factor(my_data_frame$names)
str(my_data_frame)
my_data_frame2[5,] <- c("James", 4)
my_data_frame2
my_data_frame[5,] <- c("James", 4)
my_data_frame <- my_data_frame[-5,]
my_data_frame$names
my_data_frame$names <- factor(my_data_frame$names, levels = c("Hensel", "Gretel", "Jack", "Jill"))
my_data_frame$names
# Loops
squareroots <- NA
for(i in 1:100) {
squareroots[i] <- sqrt(i)
}
# Functions
get_squareroot <- function(range) {
squareroots <- NA
for(i in range) {
squareroots[i] <- sqrt(i)
}
return(squareroots)
}
# apply
sapply(1:100, function(i) sqrt(i))
# read data
d <- read_csv("../data/chen_lein.csv.zip", quote = "\"")
# structure of the data frame
str(d)
colnames(d) # tag0002 is the lemma column
# making replacements: gsub
mytext <- "This text contains an error."
gsub("an", "no", mytext)
gsub("an", "not a single", mytext)
# making a table
my_data_frame
# making a table
my_fruits <- c("apple", "apple", "orange", "apple", "pear", "orange", "pear")
table(my_fruits)
as.data.frame(table(my_fruits))
# dplyr's summarise command
tibble(fruit = my_fruits,
state = c(rep("rotten", 4), rep("fresh", 3)))
# dplyr's summarise command
my_fruits2 <- tibble(fruit = my_fruits,
state = c(rep("rotten", 4), rep("fresh", 3)))
my_fruits2 %>% group_by(fruit) %>% summarise(
n = n()
)
my_fruits2 %>% group_by(fruit, state) %>% summarise(
n = n()
)
# structure of the data frame
str(d)
colnames(d) # tag0002 is the lemma column
# rename the column (using dplyr's rename_with)
d <- rename_with(d, ~"Lemma", "tag0002")
# add a column indicating whether the lemma
# ends with chen or lein
d$Variant <- ifelse(grepl(".*lein$", d$Lemma), "lein", "chen")
# plot relative frequency of variant over time
d %>% group_by(file_decade, Variant) %>% summarise(
n = n()
) %>% ggplot(aes(x = factor(file_decade), y = n, fill = Variant)) +
geom_col(position = position_dodge())
# or stacked barplot with bars summing up to 100%
d %>% group_by(file_decade, Variant) %>% summarise(
n = n()
) %>% ggplot(aes(x = factor(file_decade), y = n, fill = Variant)) +
geom_col(position = "fill")
# we can also group by text type
d %>% group_by(file_decade, file_genre, Variant) %>% summarise(
n = n()
) %>% na.omit %>%
ggplot(aes(x = factor(file_decade), y = n, fill = Variant)) +
geom_col(position = "dodge") + facet_wrap(~file_genre)
# read dataset
rts <- read_xlsx("../data/fake_RT_data.xlsx")
# inspect data
rts
# use pivot_longer()
?pivot_longer # show help file
colnames(rts) # show column names: we need them
# as input for pivot_longer
rts2 <- pivot_longer(rts, cols = starts_with("ReactionTime_"),
names_prefix="ReactionTime_Condition",
names_to="Condition", values_to = "RT")
# this can be used as input for a ggplot!
ggplot(rts2, aes(x = Condition, y = RT)) +
geom_boxplot()
