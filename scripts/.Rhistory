}
for(i in 1:10) {
silvie <- read_xlsx("/Users/stefanhartmann/sciebo/Sciebo Documents/Bilingual_Language_Acquisition/Raw_data_May2020/silvie_wordlist02.xlsx", sheet = i)
if(i == 1) {
n_all_silvie <- sum(silvie$n_CHI)+sum(silvie$n_CDS)
} else {
n_all_silvie <- n_all + sum(silvie$n_CHI)+sum(silvie$n_CDS)
}
}
n_all+n_all_silvie
f <- list.files("/Users/stefanhartmann/sciebo/Sciebo Documents/Bilingual_Language_Acquisition/Raw_data_May2020/silvie_wordlist", full.names = T)
f <- list.files("/Users/stefanhartmann/sciebo/Sciebo Documents/Bilingual_Language_Acquisition/Raw_data_May2020/silvie_wordlist", full.names = T)
for(i in 1:length(f)) {
silvie <- read_xlsx(f[i])
if(i == 1) {
n_all_silvie <- sum(silvie$n_CHI)+sum(silvie$n_CDS)
} else {
n_all_silvie <- n_all + sum(silvie$n_CHI)+sum(silvie$n_CDS)
}
}
n_all+n_all_silvie
f <- list.files("/Users/stefanhartmann/sciebo/Sciebo Documents/Bilingual_Language_Acquisition/Raw_data_May2020/lily_wordlist", full.names = T)
for(i in 1:length(f)) {
lily <- read_xlsx(f[i])
if(i == 1) {
n_all_lily <- sum(lily$n_CHI)+sum(lily$n_CDS)
} else {
n_all_lily <- n_all + sum(lily$n_CHI)+sum(lily$n_CDS)
}
}
n_all+n_all_silvie+n_all_lily
install.packages("quanteda")
library(gutenbergr)
gutenberg_languages
filter(gutenberg_languages, language=="de")
library(tidyverse)
gl <- gutenberg_languages
filter(gl, language=="de")
glde <- filter(gl, language=="de")
gutenberg_metadata
gutenberg_metadata
586.2*6
586.2*9
586.2*6
586.2*8
707.62*6
4689.6+4245.72
544.33*4
544.33*5
544.33*6
544.33*4
544.33*5
3000/707.62
707.62*4
707.62*4.5
10+6+2+8+18
# relative Bestehensgrenze:
117.5*0.78
# Punktverteilung
seq(91, 160, length.out = 11)
127+139+148+145+119+112
790/6
0.78*131.66
60+88+69
217/3
library(tidyverse)
d <- read_csv("/Users/stefanhartmann/sciebo/ARENAS WP2/Data DE 12022024/germany.csv")
d$Text
grep("#genderwahn", d)
grep("#genderwahn", d$Text)
grep("genderwahn", d$Text, ignore.case = T)
grep("gender", d$Text, ignore.case = T)
library(writexl)
d[grep("gender", d$Text, ignore.case = T),]
d[grep("gender", d$Text, ignore.case = T),] %>% write_xlsx("gender_twitter.xlsx")
d <- read_csv("/Users/stefanhartmann/sciebo/ARENAS WP2/Data DE 12022024/facebook-de.csv")
d[grep("gender", d$`Post, Text`, ignore.case = T),] %>% write_xlsx("gender_twitter.xlsx")
d <- read_csv("/Users/stefanhartmann/sciebo/ARENAS WP2/Data DE 12022024/germany.csv")
d[grep("gender", d$Text, ignore.case = T),] %>% write_xlsx("gender_twitter.xlsx")
d <- read_csv("/Users/stefanhartmann/sciebo/ARENAS WP2/Data DE 12022024/facebook-de.csv")
d[grep("gender", d$Text, ignore.case = T),] %>% write_xlsx("gender_fb.xlsx")
d[grep("gender", d$`Post, Text`, ignore.case = T),] %>% write_xlsx("gender_fb.xlsx")
d[grep("gender", d$`Post, Text`, ignore.case = T),]
d <- read_csv("/Users/stefanhartmann/sciebo/ARENAS WP2/Data DE 12022024/youtube-GER-clean.csv")
d[grep("gender", d$`Post, Text`, ignore.case = T),] %>% write_xlsx("gender_youtube.xlsx")
d[grep("gender", d$`Comment, Text`, ignore.case = T),] %>% write_xlsx("gender_youtube.xlsx")
d[grep("gender", d$`Comment, Text`, ignore.case = T),]
library(tidyverse)
1500*12
1200*12
1000*12
900*12
160000*0.63
100800+(0.63*100800)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
# read data
d <- read_xlsx("../data/fake_RT_data.xlsx")
setwd("~/sciebo/Projekte/dataviz-evalmo/scripts")
# piping
(2+2) %>% sqrt()
# piping
2+2 %>% sqrt()
sqrt(4)
# piping
(2+2) %>% sqrt()
# piping
(2+2) %>% sqrt()
sqrt(4)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
# read data
d <- read_xlsx("../data/fake_RT_data.xlsx")
# read another file
d1 <- read_csv("../data/dtababy_with_author_data.csv")
# piping
(2+2) %>% sqrt()
sqrt(4)
gsub(pattern = "bla", replacement = "blubb", x = "bla bla bla")
d1$Year <- gsub(".*_", "", d1$ID)
d1 <- d1 %>% mutate(Year2 = gsub(".*_", "", ID))
# pivoting
d <- d %>% pivot_longer(cols = starts_with("ReactionTime"))
d <- setNames(d, c("Participant", "Condition", "RT"))
d$Condition <- gsub(".*_Condition", "", d$Condition)
# read data
d <- read_xlsx("../data/fake_RT_data.xlsx")
d <- d %>% pivot_longer(cols = starts_with("ReactionTime"),
names_prefix = "ReactionTime_Condition",
names_to = "Condition",
values_to = "RT")
View(d)
View(d)
ggplot(d, aes(x = Condition, y = RT))
ggplot(d, aes(x = Condition, y = RT)) +
geom_boxplot()
ggplot(d, aes(x = Condition, y = RT)) +
geom_boxplot(notch = T)
?geom_boxplot
ggplot(d, aes(x = Condition, y = RT)) +
geom_point()
ggplot(d, aes(x = Condition, y = RT)) +
geom_boxplot()
ggplot(d, aes(x = Condition, y = RT)) +
geom_boxplot() + geom_violin()
ggplot(d, aes(x = Condition, y = RT)) +
geom_boxplot() + geom_violin(alpha = .5)
library(ggbeeswarm)
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .5)
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7)
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_minimal()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_classic()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_dark()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_gray()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_light()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw()
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid = element_blank())
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.major = element_blank())
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank())
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank())
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
print("Hi Berlin")
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()) +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(size = 18),
axis.text = element_text(size = 18))
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(size = 18),
axis.text = element_text(size = 18, family = "Times"))
ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(size = 18, family = "Times"),
axis.text = element_text(size = 18, family = "Times"))
p <- ggplot(d, aes(x = Condition, y = RT))
p
p <- p + geom_beeswarm()
p
p <- ggplot(d, aes(x = Condition, y = RT))
(p <- ggplot(d, aes(x = Condition, y = RT)))
(p <- p + geom_beeswarm())
library(patchwork)
p1 <- ggplot(d, aes(x = Condition, y = RT)) +
geom_beeswarm() + geom_boxplot(alpha = .7) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title = element_text(size = 18, family = "Times"),
axis.text = element_text(size = 18, family = "Times"))
p + p1
p /
p1
ggsave("example.png", width = 6, height = 13)
ggsave("example.png", width = 7, height = 13)
ggsave("example.png", width = 9, height = 13)
ggsave("example.svg")
tibble(x = 1:100,
y = rnorm(100))
set.seed(42)
tibble(x = 1:100,
y = rnorm(100))
df <- tibble(x = 1:100,
y = rnorm(100))
View(df)
ggplot(df, aes(x = x, y = y)) +
geom_point()
ggplot(df, aes(x = x, y = y)) +
geom_point() +
geom_smooth()
?geom_smooth
library(tidyverse)
library(shiny)
# read data
d1 <- read_delim("../data/ungbaby.csv",
delim = "\t",
quote = "") # concordance
# read data
d1 <- read_delim("../data/ungbaby.csv",
delim = "\t",
quote = "") # concordance
View(d1)
d2 <- read_csv("../data/dtababy_with_author_data.csv") # metadata
View(d2)
# inspect datasets
colnames(d1)
colnames(d2)
d1$Text_Name
gsub("text_name ", "", d1$Text_Name)
d1$ID <- gsub("text_name ", "", d1$Text_Name)
d1$ID
colnames(d1)
colnames(d2)
intersect(colnames(d1),colnames(d2))
# now we can easily join the datasets:
d <- left_join(d1,d2)
# check that the number of rows is identical:
nrow(d) == nrow(d1) # of course you can also do this
# inspect new dataset
colnames(d)
View(d)
# add decade column
d$Decade <- gsub(".$", "5", d$Year)
# check
unique(d$Decade) %>% sort # looks good
# get hapax legomena
table(d$Lemma)
# get hapax legomena
table(d$Lemma) %>% as.data.frame
# get hapax legomena
table(d$Lemma) %>% as.data.frame %>% filter(Freq == 1)
# get hapax legomena
hapaxes <- table(d$Lemma) %>%
as.data.frame %>% filter(Freq == 1) %>% select(Var1)
hapaxes
hapaxes %>% head
# we want a vector:
hapaxes <- as.vector(hapaxes[['Var1']])
# get hapax legomena
hapaxes <- table(d$Lemma) %>%
as.data.frame %>% filter(Freq == 1) %>% select(Var1)
unlist(hapaxes)
hapaxes %>% as.character
hapaxes %>% unlist
hapaxes %>% unlist %>% unname
hapaxes %>% unlist %>% unname %>% as.character()
# or:
table(d$Lemma)
# or:
table(d$Lemma) %>% as_tibble()
View(hapaxes)
# we want a vector:
hapaxes <- as.vector(hapaxes[['Var1']])
which(d$Lemma %in% hapaxes)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
n = n()
)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
horst = n()
)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
freq = n()
)
d$Lemma
c("apple", "apple", "orange") %>% unique()
c("apple", "apple", "orange") %>% unique() %>% length
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
number_of_types = length(unique(Lemma)),
number_of_tokens = n(),
number_of_hapaxes = length(which(Lemma %in% hapax))
)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
number_of_types = length(unique(Lemma)),
number_of_tokens = n(),
number_of_hapaxes = length(which(Lemma %in% hapaxes))
)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
number_of_types = length(unique(Lemma)),
number_of_tokens = n(),
number_of_hapaxes = length(which(Lemma %in% hapaxes)),
ttr = number_of_types / number_of_tokens,
pp = number_of_hapaxes / number_of_tokens
)
# summarise
d %>% group_by(Decade, Text_Type) %>% summarise(
number_of_types = length(unique(Lemma)),
number_of_tokens = n(),
number_of_hapaxes = length(which(Lemma %in% hapaxes)),
ttr = number_of_types / number_of_tokens,
pp = number_of_hapaxes / number_of_tokens
) %>% View()
# summarise
d_tbl <- d %>% group_by(Decade, Text_Type) %>% summarise(
number_of_types = length(unique(Lemma)),
number_of_tokens = n(),
number_of_hapaxes = length(which(Lemma %in% hapaxes)),
ttr = number_of_types / number_of_tokens,
pp = number_of_hapaxes / number_of_tokens
)
View(d_tbl)
# as above, remove the "text_texttype " from
# the Text_Type column:
d_tbl$Text_Type <- gsub("text_texttype ", "", d_tbl$Text_Type)
View(d_tbl)
colnames(d_tbl)
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp)) +
geom_line()
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1)) +
geom_line()
View(d_tbl)
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = Text_Type)) +
geom_line()
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = Text_Type,
col = Text_Type)) +
geom_line()
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_line() + facet_wrap(~Text_Type)
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none")
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none")
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth()
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth(alpha = .5)
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth(alpha = .2)
# visualize productivity development
ggplot(d_tbl, aes(x = Decade, y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth(alpha = .2) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12))
d_tbl$Decade %>% unique
# visualize productivity development
ggplot(d_tbl, aes(x = as.numeric(Decade), y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth(alpha = .2) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
scale_x_continuous()
# visualize productivity development
ggplot(d_tbl, aes(x = as.numeric(Decade), y = pp, group = 1,
col = Text_Type)) +
geom_point() +
geom_line() + facet_wrap(~Text_Type) +
guides(col = "none") +
geom_smooth(alpha = .2) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
scale_x_continuous(breaks = seq(1600,1900,50))
ggplot(d_tbl, aes(x = Decade, y = pp,
col = Text_Type,
group = Text_Type)) +
geom_point() +
geom_line()
p <- ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity")
p
p + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text.x",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2b",
label = "axis.text.y",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text.x = element_text(size = input$mysize2)) +
theme(axis.text.y = element_text(size = input$mysize2b)) +
theme(strip.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
