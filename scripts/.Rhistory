facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(axis.text = element_text(size = 18)) +
#theme(axis.title = element_text(size = 18)) +
#theme(strip.text = element_text(size = 18)) +
#theme(legend.text = element_text(size = 18)) +
#theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(axis.text = element_text(size = 18))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
# theme(axis.text = element_text(size = 18))
#theme(axis.title = element_text(size = 18)) +
#theme(strip.text = element_text(size = 18)) +
#theme(legend.text = element_text(size = 18)) +
#theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity")
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 200))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20))
theme(axis.text = element_text(size = 30))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 30))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text.x = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text.y = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text.y = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text.x = element_text(size = 20))
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity") +
theme(strip.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 20))
bnc <- concordances::getCWB("../BNC_ish.txt")
bnc
bnc
bnc$text_publication_date
bnc$text_publication_date %>% unique
write_csv(bnc, "../data/bnc_ish.csv.gz")
ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity")
?element_line
d_tbl
p <- ggplot(d_tbl, aes(x = Decade, y = pp,
group = 1,
col = Text_Type)) +
geom_point() +
geom_line() +
facet_wrap(~Text_Type) +
guides(col = "none") +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Potential Productivity")
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", value = 18),
plotOutput(outputId = "myplot")
)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = reactive(input$n_str)))
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = output(input$n_str)))
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
server <- function(input, output, session) {
output$myplot <- p + theme(strip.text = element_text(size = input$n_str))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr = reactive({req(input$n_str)})
output$myplot <- p + theme(strip.text = element_text(size = nstrstr))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr = reactive({req(input$n_str)})
output$myplot <- p + theme(strip.text = element_text(size = nstr))
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p #+ theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200),
plotOutput(outputId = "myplot")
)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 0, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = reactive(req(input$n_str))))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(sliderInput(
inputId="n_str", "Strip text", min = 1, max = 200, value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- reactive({req(input$n_str)})
p <- p + theme(strip.text = element_text(size = reactive(req(input$n_str))))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive(as.numeric(input$n_str))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
nstr <- reactive(as.numeric(req(input$n_str)))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
?req
server <- function(input, output, session) {
nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(numericInput(
inputId="n_str", "Strip text", value = 18),
plotOutput(outputId = "myplot")
)
server <- function(input, output, session) {
nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = nstr))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# nstr <- as.numeric(reactive({req(input$n_str)}))
p <- p + theme(strip.text = element_text(size = input$n_str))
output$myplot <- renderPlot({p})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) # collecting and incorporating
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = 18))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
numericInput(inputId = "mysize",
label = "Choose wisely the size",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
numericInput(inputId = "number_of_bins",
label = "Choose wisely the number of bins",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize",
label = "Choose wisely the size",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
ggplot(mpg, aes(x = hwy)) +
geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
# geom_histogram(bins = input$number_of_bins) +
theme(axis.text = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize4",
label = "axis.ticks",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(axis.text = element_text(size = input$mysize3)) +
theme(axis.ticks = element_text(size = input$mysize4))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(axis.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text = element_text(size = input$mysize2)) +
theme(strip.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
# play with plot elements
ui <- fluidPage(
sliderInput(inputId = "mysize",
label = "axis.title",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2",
label = "axis.text.x",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize2b",
label = "axis.text.y",
value = 10, min = 0, max = 100, step = 10),
sliderInput(inputId = "mysize3",
label = "strip.text",
value = 10, min = 0, max = 100, step = 10),
plotOutput(outputId = "our_first_reactive_plot")
)
server <- function(input, output) {
output$our_first_reactive_plot <- renderPlot({
p +
theme(axis.title = element_text(size = input$mysize)) +
theme(axis.text.x = element_text(size = input$mysize2)) +
theme(axis.text.y = element_text(size = input$mysize2b)) +
theme(strip.text = element_text(size = input$mysize3))
})
}
shinyApp(ui = ui, server = server)
